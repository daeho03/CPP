auto 키워드
	자료형을 추론
	JavaScript 등의 언어에 있는 동적인 형(type)과는 다름
	실제 자료형은 컴파일하는 동안 결정됨
	따라서, 반드시 auto변수를 초기화해야 됨
	auto를 사용하여 포인터와 참조를 받을 수 있음
		포인터 : auto 또는 auto*
			컴파일러가 어느 형인지 알아낼 수 있어서 auto*로 쓰지 않아도 되지만
				가독성을 위해 auto*로 써주는게 좋음
		참조 : auto&
			auto로 참조도 받을 수 있다면
				컴파일러가 참조인지 아닌지 구분할 수 없어서 auto&로 써야함
	const 참조를 받을 때는 const auto&를 써주는게 좋음
	auto와 함수 반환형
		auto키워드는 함수가 반환하는걸 저장하는 데 유용
		함수 반환형이 변해도 auto는 그대로
	아직 auto에 관해 모두가 동의하는 코딩 표준은 없음
	auto가 유용한 경우
		반복자에 auto 키워드는 매우 유용함
		auto로 템플릿형 받기
	best practice
		명시적이어야 함
			1. auto보다 실제 자료형 사용을 권장
			2. 예외 : 템플릿 매개변수와 반복자에는 auto 사용
			3. 포인터는 auto -> auto*
			4. const 참조는 auto& -> const auto&
		런타임 성능은 동일
statice_assert 키워드
	*assert 키워드
		실행 중에 가정(어서션, assertion)이 맞는 지 평가
		오직 디버그 빌드에서만 작동
		실패한 assert를 보려면 반드시 프로그램을 실행해야 함
			모든 코드 경로가 실행되었다는 보장이 없음
			일부 assertion은 프로그램을 실행하기 전에도 알 수 있음
	컴파일 중에 assertion 평가
	컴파일러가 assert 조건이 참인지 아닌지 앎
	실패하면 컴파일러는 컴파일 에러를 뱉음
	많은 경우에 유용한 키워드
	best practice
		최대한 assert보다 static_assert를 사용
default/delete 키워드
	default 키워드
		= default;
		default 키워드를 사용하면, 컴파일러가 특정한 생성자, 연산자 및 소멸자를 만들어 낼 수 있음
		그래서, 비어 있는 생성자나 소멸자를 구체화할 필요가 없음
		또한 기본 생성자, 연산자 및 소멸자를 더 분명하게 표시할 수 있음
			명확하게 표현하는 것은 항상 좋음
	delete 키워드
		= delete;
		컴파일러가 자동으로 생성자를 만들어 주길 원치 않는다면 delete 키워드를 사용
		private 접근 제어자로 빈 생성자를 만드는 트릭에 비해 에러메시지도 명확하고 암시적이지 않음
final/override 키워드	
	final 키워드
		클래스나 가상 함수를 파생 클래스에서 오버라이딩 못 하도록 하려면 final 키워드를 사용
		컴파일 도중에 확인
		당연히 가상 함수가 아니면 쓸 수 없음
	override 키워드
		잘못된 가상 함수 오버라이딩을 막으려면 override 키워드를 사용
		컴파일 조중에 검사
		당연히 가상 함수가 아니면 쓸 수 없음
offsetof 매크로
	#define offsetof(type, member)
		매크로의 일정
		특정 멤버가 본인을 포함한 자료 구조의 시작점에서 몇 바이트만큼 떨어져 있는지 알려줌