복사 생성자 <class-name> (const <class-name>&);
	같은 클래스에 속한 다른 개체를 이용하여 새로운 개체를 초기화
		같은 크기, 같은 데이터
	Vector(const Vector& other);
	Vector a;	// 매개변수 없는 생성자를 호출
	Vector b(a);	// 복사 생성자를 호출
	암시적(implicit) 복사 생성자
		코드에 복사 생성자가 없는 경우, 컴파일러가 암시적 복사 생성자를 자동생성
		암시적 복사 생성자는 얕은 복사(shallow copy)를 수행
			각 멤버의 값을 복사
			개체인 멤버변수는 그 개체의 복사 생성자가 호출됨
			얕은 복사는 데이터 공유의 문제가 있어서 깊은 복사가 필요함
	깊은 복사(deep copy)를 한 복사 생성자
		포인터 변수가 가리키는 실제 데이터까지도 복사
		사본을 지워도 얕은복사와 달리 원본은 지워지지 않음
		매개변수 있는 생성자와 비슷함
메서드 오버로딩
	매개변수 목록을 제외하고는 모든 게 동일
	반환형은 상관 없음
	정확한 매치와 표준 변환의 수가 같을 때는 컴파일 에러
	함수 매칭 결과는 3개가 있음
		1. 매칭되는 함수를 찾을 수 없음 -> 컴파일 에러
		2. 매칭되는 함수를 여러 개 찾음 -> 컴파일 에러
		3. 가장 적합한 함수를 하나 찾음 -> OK
연산자 오버로딩
	연산자 함수처럼 작동하는 부호
	C++에서는 프로그래머가 연산자를 오버로딩할 수 있음(앞에서 말함)
	부호는 같지만 여러가지 연산이 가능
	연산자 오버로딩 하는 방법은 두 가지
		멤버 함수
		멤버 아닌 함수(전역 함수)
	연산자 역시 메서드(멤버 함수)
		std::cout << number;
		std::cout.operator<<(number); // 위와 동일
	특정 연산자들은 멤버 함수를 이용해서만 오버로딩이 가능(=, (), [], ->)
	새로운 연산자 부호를 만들 수 없음
	오버로딩할 수 없는 연산자가 존재
friend 키워드
	다른 클래스나 함수가 나의 private 또느 protected 멤버에 접근할 수 있게 허용
	클래스 정의 안에 friend 키워드를 사용 가능
		friend class <class-name>
		firend 함수원형;
			friend 함수는 멤버함수가 아님
	public에 넣나 private에 넣나 차이없으니 보통 위에 적는게 일반적
	함수 정의는 ···.cpp에 넣어주는게 일반적
연산자 오버로딩과 const
	멤버변수의 값이 바뀌는 것을 방지
	최대한 많은 곳에 const를 붙일 것
		당장 const가 아닐 이유가 없을이
	지역 변수에 까지도
		모든 회사가 이 코딩표준을 따르지 않음
	const &를 사용하는 이유
		불필요한 개체의 사본이 생기는 것을 방지
		멤버변수가 바뀌는 것도 방지
연산자 오버로딩을 남용하지 말 것
	헷 갈릴 수 있는 연산자 오버로딩은 하지 말 것
대입(assignment) 연산자
	operator=
	복사 생성자와 거의 동일
		그러나 대입 연산자는 메모리를 해제해 줄 필요가 있을 수 있음
	복사 생성자를 구현했다면 대입 연산자도 구현해야 할 것임
		암시적으로 컴파일러가 operator=연산자를 자동으로 만들어 줌
암시적 함수들을 "지우는"법
	클래스에 딸려오는 기본 함수들
		매개변수 없는 생성자
		복사 생성자
		소멸자
		대입 연산자
	private에 넣어주면 됨