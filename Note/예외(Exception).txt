예외(Exception)
	#include <exception>
	C++도 예외를 "지원"
		하지만 C++에서는 예외의 중요성이 낮음
			if 문으로도 수많은 예외 발생 상황을 처리할 수 있음
	C++의 예외
		프로그래머가 만든 것
		C++ 표준 라이브러리가 많은 예외를 던지기도 함
			하지만 Java나 C#에서 당연히 있는 예외가 C++에는 없음
				예외가 우선인 언어가 아님
	OS Exception
		비동기적(Asynchronous)
		윈도우 : 구조적 예외 처리 (SEH)
		리눅스 : POSIX 신호
		플랫폼 마다 다름
		오버헤드가 비교적 많음, 느림
	std::exception
		동기적(Synchronous)
		C++ STL
		모든 플랫폼에 공통
		오버헤드가 비교적 적음
	생성자에서 예외
		생성자에서는 예외쓰는게 괜찮음
			하지만 예외처리 기능이 꺼 있는게 많은 C++컴파일러의 기본 옵션
				예외처리 기능
					느리다
					C++ 사용하는 속도를 중요시하는 업계와 맞지 않음
	적절한 예외처리
		1. 유효성 검사/예외는 오직 경계에서만
			밖에서 오는 데이터를 제어할 수 없기 떄문
				ex) 외부에서 들어오는 웹 요청, 파일 읽기/쓰기, 외부 라이브러리
		2. 일단 시스템에 들어온 데이터는 다 올바르다고 간주할 것
			assert를 사용하여 개발 중 문제를 잡아내고 고칠 것
		3. 예외 상황이 발새할 떄는 NULL을 능동적으로 사용할 것
			하지만 기본적으로 함수가 NULL을 반환하거나 받는 일은 없어야 함
				함수가 NULL을 반환하거나 받는다면 함수의 이름을 잘 지을 것
		일단 시스템에 들어온 데이터는 다 올바르다고 간주
			개발 중 문제는 assert를 사용하여 잡아내고 고칠 것
	코딩 표준
		매개 변수가 NULL이 될 수 있으면, 매개 변수 이름 뒤에 'OrNULL'을 붙일 것
		함수가 NULL을 반환할 수 있으면, 함수 이름 뒤에 'OrNull'을 붙일 것
	예외는 완벽하지 않음
		동일한 프로그래머가 로직과 예외를 모두 작성
			로직이 잘못돼 있으면 예외도 틀렸을 가능성이 높음
				동일한 프로그래머가 작성한 유닛 테스트가 한계를 갖는 이유
		양질의 소프트웨어는 예외가 아니라 철저한 테스트 계획에서 만들어짐
	개발 중 버그 잡기
		라이브 서버에서 해서는 안 됨
		개발 중 코드에서 버그를 잡기 위해서는 assert를 사용
			전제 조건, 사후 조건, 그리고 불변값 확인
			또한 assert가 실패하면 올바른 호출 스택을 볼 수 있음
		품질 관리(QA)가 제대로 이루어지지 않았다면 차라리 소프트웨어가 뻗어 버리게 만드는 게 좋음
			문제가 바로 드러나기에 바로 고칠 수 있기 때문
			하지만, 안전과 생명에 관련되는 소프트웨어라면 예외
	예외가 없는 경우
		프로그램에서 크래시 발생
		크래시에서 메모리 덤프(dump)를 얻을 수 있음
		개발자는 덤프 파일을 열어 디버깅할 수 있음
	예외가 있는 경우
		예외가 없는 경우에서 하는 어떠한 것도 안 할 가능성이 높음
		아마 어딘가에서 printf로 찍은 로그(log)를 보며 디버깅을 할 것임