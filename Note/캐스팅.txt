캐스팅(형변환)
	암시적(Implicit) 캐스팅
		컴파일러가 형을 변환해 줌
			단, 형 변환이 허용되고 프로그래머가 명시적으로 형 변환을 안 할 경우
	명시적(Explicit) 캐스팅
		프로그래머가 형 변환을 위한 코드를 직접 작성
		C++ 캐스팅
			1. static_cast
			2. const_cast
			3. dynamic_cast(C++, modern C++)
			4. reinterpret_cast
		C 스타일 캐스팅
			C++ 스타일 4개의 캐스팅 중 하나를 함
				명확하지 못함
			명백한 실수를 컴파일러가 캐치하지 못함
				C++ 캐스팅이 이런 문제를 해결
				그러나 기계는 C/C++를 구분하지 않음
	static_cast
		static_cat <<type>> (<variable-name>)
		값
			두 숫자 형 간의 변환
				값을 유지(단, 반올림 오차는 제외)
				이진수 표기는 달라질 수 있음
		개체 포인터
			변수형 체크 후 베이스 클래스르 파생 클래스로 변환
			컴파일 시에만 형 체크 가능
			실행 도중 여전히 크래시가 날 수 있음
	reinterpret_cast
		reinterpret_cast <<type>> (<variable-name>)
		연관 없는 두 포인터 형 사이의 형 변환을 허용
		포인터와 포인터 아닌 변수 사이의 형 변환을 허용
		이진수 표기는 달라지지 않음
			A형의 이진수 표기를 그냥 B형인 것처럼 해석
	const_cast
		const_cast <<type>> (<variable-name>)
		형을 바꿀 수 없음(형변환 허용x)
		const 또는 valatile 애트리뷰트를 제거할 때 사용
		포인터 형에 사용할 때만 말이 됨
	dynamic_cast
		dynamic_cast <<type>> (<variable-name>)
		실행 중에 형을 판단
		포인터 또는 참조 형을 캐스팅할 때만 쓸 수 있음
		호환되지 않는 자식형으로 캐스팅하려 하면 NULL을 반환
			따라서, static_cast보다 안전
		이걸 쓰려면 컴파일 중에 RTTI(실시간 타입정보, Real-Time Type Information)를 켜야 함
			안 켜 있을 시 static_cast로 작동
				실제로는 dynamic_cast와 static_case가 동일하게 동작
			C++ 프로젝트에서 RTTI를 끄는 것이 보통(Exception도)
	캐스팅 규칙
		1. 기본적으로 static_cast를 쓸 것
		2. reinterpret_cast
			포인터와 비포인터 사이의 변환
			서로 연관이 없는 포인터 사이의 변환은 데이터형이 맞다고 확신할 때만 할 것
		3. 내가 변경권한이 없는 외부 라이브러리를 호출할 때만 const_cast를 쓸 것