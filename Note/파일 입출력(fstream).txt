파일 입출력 <fstream>
	ifstream
		파일 입력
		ifstream fin;
		fin.open("file.txt");
		모드 플래그
			기본 ios::in
	ofstream
		파일 출력
		ofstream fout;
		fout.open("file.txt");
		모드 플래그
			기본 ios::out | ios::trunc
	fstream
		파일 입력 및 출력
		fstream fs;
		fs.open("file.txt");
		모드 플래그
			기본 ios::in | ios::out
	파일 스트림에 <<, >>, 조정자 등도 쓸 수 있음
	open()
		각 스트림마다 open() 메서드가 있음
		모드 플래그
			비트 OR 연산자인 | 로 결합할 수 있음
			네임스페이스
				ios_base
			모든 조합이 유효하지는 않음
			in : 읽기
			out : 쓰기
			ate : 파일의 끝에 위치
			app : append 덧 붙이기
			trunc : 파일이 존재하면 지움
			binary : 이진모드
	파일 열기 모드
		C	C++
		r -> ios_base::in
		w -> ios_base::out
			ios_base::out | ios_base::trunc
		a -> ios_base::out | ios_base::app
		r+ -> ios_base::in | ios_base::out
		w+ -> ios_base::in | ios_base::out | ios_base::trunc
	파일 닫기
		반드시 해 줄 필요는 없음 소멸하면서 자동으로 닫아준다
		.close()
			각 스트림마다 close() 메서드가 있음
	.is_open()
		파일이 열려 있는지 확인
	여러 테스트 케이스
		유효한 입력뒤에 EOF
		유효한 입력과  뉴라인 뒤에 EOF
		유효하지 않은 입력 뒤에 EOf
		유효하지 않은 입력과 뉴라인 뒤에 EOF
		공백: 탭도 포함할 건지
		키보드 입력과 입력 리다이렉션(redirection)을 둘 다 확인하기
	read(*char, streamsize)
		파일로 부터 문자를 읽어 저장
	seekp/seekg
		seekp() : 쓰기 포인터의 위치를 변경
		seekg() : 읽기 포인터의 위치를 변경
	teelp/tellg
		teelp() : 쓰기 포인터의 위치를 구함
		teelg() : 읽기 포인터의 위치를 구함
	ios_base::
		ios_base::beg : 스트림의 시작위치에서 지정된 오프셋
		ios_base::cur : 스트림 포인터의 현재 위치에서 지정된 오프셋
		ios_base::end : 스트림의 끝에서 부터 지정된 오프셋
	bad() : 만약 읽기 또는 쓰기 중에 오류가 발생하면 true를 돌려준다. 우리가 열리지 않은 파일에 쓰기를 하는 경우 또는 장치에 공간이 없을 때 쓰기를 하는 경우를 예로 들 수 있다.
	fail() : 만약 우리가 정수 값을 읽어 들였는데 알파벳 문자를 넘겨받는 경우처럼 format 에러가 발생하는 경우, true를 돌려준다.
	eof() : eof(파일의 끝)와 만나면 true를 돌려준다
	good() : 스트림의 상태가 입출력 작업을 할 수 있는지 확인한다.